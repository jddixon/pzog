#!/usr/bin/python3

# ~/dev/py/pzog/ringDataGen

import binascii
# import os
import sys
import time
from argparse import ArgumentParser

from pzog import __version__, __version_date__, RING_IP_ADDR, PZOG_PORT

from xlattice.pyca_node import Node

# PATs AND REs ######################################################


def do_whatever(args):
    verbose = args.verbose

    nodes = {}
    for pair in RING_IP_ADDR:
        host_name = pair[0]
        ip_addr = pair[1]
        this_node = Node()     # default SHA2, 2048-bit keys
        node_id = this_node.node_id
        nodes[host_name] = this_node
        hex_node_id = binascii.b2a_hex(node_id)
        if verbose:
            print("\nHOST: %-12s %16s" % pair)
            print("  node_id %s" % hex_node_id)
            print("  hex_node_id len is %u" % len(hex_node_id))
            print("  public key is %s" % this_node.pubKey.exportKey())
            print("  private key is %s" % this_node.key.exportKey())


def main():

    pgmNameAndVersion = "ringDataGen v%s %s" % (__version__, __version_date__)
    timestamp = "%04d%02d%02d-%02d%02d%02d" % time.gmtime()[:6]

    # -- program defaults -------------------------------------------

    # -- check for config file --------------------------------------

    # -- parse the command line -------------------------------------
    # see docs.python.org/library/argparse.html
    parser = ArgumentParser()

    parser.add_argument('-j', '--justShow', action='store_true',
                        help='show args and exit')
    parser.add_argument('-p', '--port', type=int, default=PZOG_PORT,
                        help='port to listen on')
    parser.add_argument('-V', '--showVersion', action='store_true',
                        help='show version number and date')

    parser.add_argument('-v', '--verbose', action='store_true',
                        help='talk a lot')

    args = parser.parse_args()      # a Namespace object

    # -- fixups -----------------------------------------------------
    args.pgmNameAndVersion = pgmNameAndVersion
    args.timestamp = timestamp

    # -- sanity checks ----------------------------------------------
    if args.port <= 0 or args.port >= 65536:
        print("port '%d' is out of range" % args.port)
        sys.exit(1)

    # fixups --------------------------------------------------------
    args.pgmNameAndVersion = pgmNameAndVersion

    # -- do it ------------------------------------------------------
    if args.verbose or args.showVersion or args.justShow:
        print(args.pgmNameAndVersion)

    if args.justShow or args.verbose:
        print('justShow         = ' + str(args.justShow))
        print('showVersion      = ' + str(args.showVersion))
        print('timestamp        = ' + str(args.timestamp))
        print('verbose          = ' + str(args.verbose))

    if not args.justShow:
        lock_mgr = None
        access_log = None
        error_log = None
        # WORK IN PROGRESS - currently unused
        _, _, _ = lock_mgr, access_log, error_log
        # END WIP
        do_whatever(args)


if __name__ == '__main__':
    main()

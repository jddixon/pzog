#!/usr/bin/python3
# ~/dev/py/pzog/pzogd

import os
import sys
import time
import socket
import traceback
from argparse import ArgumentParser

from xlattice.procLock import ProcLock
from xlattice.ftLog import LogMgr
from optionz import dump_options
from pzog import __version__, __version_date__, PZOG_MAX_MSG, PZOG_PORT


# PATs AND REs ######################################################

def do_whatever(args):
    verbose = args.verbose

    skt = None
    (cnx, addr) = (None, None)
    skt = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    skt.bind(('', args.port))
    skt.listen(1)
    try:
        running = True
        while running:
            print("WAITING FOR CONNECTION")              # DEBUG
            cnx, addr = skt.accept()
            try:
                accept_msg = "CONNECTION FROM %s" % str(addr)
                if verbose:
                    print(accept_msg)
                print("BRANCH TO args.access_log.log()")
                sys.stdout.flush()
                args.access_log.log(accept_msg)
                print("BACK FROM args.access.log()")
                sys.stdout.flush()

                while True:
                    print("BRANCH TO cnx.recv")
                    sys.stdout.flush()
                    data = cnx.recv(PZOG_MAX_MSG)
                    # DEBUG
                    print("RECEIVED: %s" % data)         # DEBUG
                    # END
                    if not data:
                        break
                    if data.endswith('\r\n'):
                        cnx.sendall('ok\r\n')
                        args.access_log.log(data[:-2])
                        if data == 'quit\r\n':
                            break
                        if data == 'shutdown\r\n':
                            running = False
                            break
                    else:
                        err_msg = '%s: %s' % (addr, data)
                        # XXX should log to error.log
                        break  # --+
            except KeyboardInterrupt:
                print("<keyboard interrupt received while connection open>")
                # connection will be closed
            finally:  # <------------+
                if cnx:
                    cnx.close()
    except KeyboardInterrupt:
        print("<keyboard interrupt received while listening>")
        # listening socket will be closed
    finally:
        if cnx:
            cnx.close()
        if skt:
            skt.close()


def main():

    pgm_name_and_version = "pzogd v%s %s" % (__version__, __version_date__)
    timestamp = "%04d%02d%02d-%02d%02d%02d" % time.gmtime()[:6]

    # -- program defaults -------------------------------------------

    with open('/etc/hostname', 'r') as file:
        this_host = file.read().strip()
    # DEBUG
    print("thisHost is '%s'" % this_host)
    # END

    # -- check for config file --------------------------------------

    # -- parse the command line -------------------------------------
    # see docs.python.org/library/argparse.html
    parser = ArgumentParser()

    parser.add_argument('-e', '--ec2Host', action='store_true',
                        help='set if machine is in EC2')

    parser.add_argument('-j', '--just_show', action='store_true',
                        help='show args and exit')
    parser.add_argument('-p', '--port', type=int, default=PZOG_PORT,
                        help='port to listen on')
    parser.add_argument('-t', '--show_timestamp', action='store_true',
                        help='show run timestamp')

    parser.add_argument('-T', '--testing', action='store_true',
                        help='test run - write to ./testU')

    parser.add_argument('-V', '--show_version', action='store_true',
                        help='show version number and date')

    parser.add_argument('-v', '--verbose', action='store_true',
                        help='talk a lot')

    args = parser.parse_args()      # a Namespace object

    # -- fixups -----------------------------------------------------
    args.pgm_name_and_version = pgm_name_and_version
    args.timestamp = timestamp

    # -- sanity checks ----------------------------------------------
    if args.port <= 0 or args.port >= 65536:
        print("port '%d' is out of range" % args.port)
        sys.exit(1)

    # XXX logs/ must be a directory; {access,error}.log must be files
    log_dir = 'logs'
    if not os.path.exists(log_dir):
        os.mkdir(log_dir)
    args.log_dir = log_dir

    # fixups --------------------------------------------------------
    args.pgm_name_and_version = pgm_name_and_version
    args.this_host = this_host

    # -- do it ------------------------------------------------------
    if args.verbose or args.show_version or args.just_show:
        print(args.pgm_name_and_version)
    if args.show_timestamp:
        print('run at %s GMT' % timestamp)   # could be prettier
    else:
        print()                               # there's a comma up there

    if args.just_show or args.verbose:
        dump_options(args)

    if not args.just_show:
        lock_mgr = None
        access_log = None
        error_log = None
        try:
            lock_mgr = ProcLock('pzogd')
            log_mgr = LogMgr(args.log_dir)
            access_log = log_mgr.open('access')
            args.access_log = access_log
#           # DEBUG -------------------------------------------------
#           print "ACCESS LOG IS %s" % access_log.logFileName
#           # write to the log file causes core dump XXXXX
#           access_log.log("opened access log")
#           # END ---------------------------------------------------
            error_log = log_mgr.open('error')
            args.error_log = error_log
            # DEBUG -------------------------------------------------
            # pylint can't find the ActualLog property log_file
            # pylint:disable=no-member
            print("ERROR LOG IS %s" % error_log.log_file)
            # write to the log file causes core dump XXXXX
            error_log.log("opened error log")
            # END ---------------------------------------------------
            do_whatever(args)
        except BaseException:
            traceback.print_exc()
            sys.exit(1)
        finally:
            # XXX better: put each of these in a try block, swallowing
            #   exceptions
            if log_mgr:
                log_mgr.close()
            if lock_mgr:
                lock_mgr.unlock()


if __name__ == '__main__':
    main()

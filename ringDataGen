#!/usr/bin/python3

# ~/dev/py/pzog/ringDataGen

import binascii, os, sys, time
from argparse   import ArgumentParser

from pzog import *
from pzog.xlattice import node

# PATs AND REs ######################################################

def doWhatever(args):
    verbose = args.verbose
   
    nodes = {}
    for pair in RING_IP_ADDR:
        hostName = pair[0]
        ipAddr   = pair[1]
        thisNode = node.Node()       # sha3 by default; generates keys
        nodes[hostName] = thisNode 
        nodeID   = thisNode.nodeID
        hexNodeID   = binascii.b2a_hex(nodeID)
        if verbose:
            print("\nHOST: %-12s %16s" % pair)
            print("  nodeID %s"  % hexNodeID)
            print("  hexNodeID len is %u" % len(hexNodeID))
            print("  public key is %s" % thisNode.pubKey.exportKey())
            print("  private key is %s" % thisNode.key.exportKey())



 
def main():

    pgmNameAndVersion   = "ringDataGen v%s %s" % ( __version__, __version_date__)
    timestamp           = "%04d%02d%02d-%02d%02d%02d" % time.gmtime()[:6]

    # -- program defaults -------------------------------------------

    
    # -- check for config file --------------------------------------

    # -- parse the command line -------------------------------------
    # see docs.python.org/library/argparse.html 
    parser = ArgumentParser()
    
    parser.add_argument('-j', '--justShow', action='store_true',
            help='show args and exit')
    parser.add_argument('-p', '--port', type=int, default=PZOG_PORT,
            help='port to listen on')
    parser.add_argument('-V', '--showVersion', action='store_true',
            help='show version number and date')

    parser.add_argument('-v', '--verbose', action='store_true',
            help='talk a lot')

    args = parser.parse_args()      # a Namespace object

    # -- fixups -----------------------------------------------------
    args.pgmNameAndVersion = pgmNameAndVersion
    args.timestamp      = timestamp

    # -- sanity checks ----------------------------------------------
    if args.port <= 0 or 65536 <= args.port:
        print("port '%d' is out of range" % args.port)
        sys.exit(1)

    # fixups --------------------------------------------------------
    args.pgmNameAndVersion  = pgmNameAndVersion

    # -- do it ------------------------------------------------------
    if args.verbose or args.showVersion or args.justShow:
        print(args.pgmNameAndVersion)

    if args.justShow or args.verbose:
        print('justShow         = ' + str(args.justShow))
        print('showVersion      = ' + str(args.showVersion))
        print('timestamp        = ' + str(args.timestamp))
        print('verbose          = ' + str(args.verbose))
        
    if not args.justShow:
        lockMgr     = None
        accessLog   = None
        errorLog    = None
        doWhatever(args)

if __name__ == '__main__':
    main()
